// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppNotiContext))]
    partial class AppNotiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Core.Entities.Auditoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DescAccion")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("DateTime");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Auditoria", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Blockchain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("DateTime");

                    b.Property<string>("HasGenerado")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("IdAuditoriaFk")
                        .HasColumnType("int");

                    b.Property<int>("IdHiloRespuestaFk")
                        .HasColumnType("int");

                    b.Property<int>("IdNotificacionFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdAuditoriaFk");

                    b.HasIndex("IdHiloRespuestaFk");

                    b.HasIndex("IdNotificacionFk");

                    b.ToTable("BlockChain", (string)null);
                });

            modelBuilder.Entity("Core.Entities.EstadoNotificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NombreEstado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("EstadoNotificacion", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Formato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NombreFormato")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Formato", (string)null);
                });

            modelBuilder.Entity("Core.Entities.GenericoVsModulo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdGenericoFk")
                        .HasColumnType("int");

                    b.Property<int>("IdRolFk")
                        .HasColumnType("int");

                    b.Property<int>("IdSubModulofk")
                        .HasColumnType("int");

                    b.Property<int?>("MaestroVsSubmoduloId")
                        .HasColumnType("int");

                    b.Property<int?>("SubmodulosId")
                        .HasColumnType("int");

                    b.Property<int?>("rolesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdGenericoFk");

                    b.HasIndex("MaestroVsSubmoduloId");

                    b.HasIndex("SubmodulosId");

                    b.HasIndex("rolesId");

                    b.ToTable("GenericoVsModulo", (string)null);
                });

            modelBuilder.Entity("Core.Entities.HiloRespuestaNotificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("DateTime");

                    b.Property<string>("NombreTipo")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.HasKey("Id");

                    b.ToTable("HiloRespuestaNotificacion", (string)null);
                });

            modelBuilder.Entity("Core.Entities.MaestroVsSubmodulo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("DateTime");

                    b.Property<int>("IdMaestroFk")
                        .HasColumnType("int");

                    b.Property<int>("IdSubmoduloFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdMaestroFk");

                    b.HasIndex("IdSubmoduloFk");

                    b.ToTable("MaestrosVsSubmodulos", (string)null);
                });

            modelBuilder.Entity("Core.Entities.ModuloMaestro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("DateTime");

                    b.Property<string>("NombreModulo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ModulosMaestros", (string)null);
                });

            modelBuilder.Entity("Core.Entities.ModuloNotificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AsuntoNotifcacion")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("DateTime");

                    b.Property<int>("IdEstadoNotificacionFk")
                        .HasColumnType("int");

                    b.Property<int>("IdFormatoFk")
                        .HasColumnType("int");

                    b.Property<int>("IdHiloRespuestaFk")
                        .HasColumnType("int");

                    b.Property<int>("IdRadicadoFk")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoNotificacionFk")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoRequerimientoFk")
                        .HasColumnType("int");

                    b.Property<string>("TextoNotificacion")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex("IdEstadoNotificacionFk");

                    b.HasIndex("IdFormatoFk");

                    b.HasIndex("IdHiloRespuestaFk");

                    b.HasIndex("IdRadicadoFk");

                    b.HasIndex("IdTipoNotificacionFk");

                    b.HasIndex("IdTipoRequerimientoFk");

                    b.ToTable("ModuloNoficaciones", (string)null);
                });

            modelBuilder.Entity("Core.Entities.PermisoGenerico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("DateTime");

                    b.Property<string>("NombrePermiso")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("PermisosGenericos", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Radicado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("DateTime");

                    b.HasKey("Id");

                    b.ToTable("Radicados", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Core.Entities.RolVsMaestro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("DateTime");

                    b.Property<int>("IdMaestroFk")
                        .HasColumnType("int");

                    b.Property<int>("IdRolFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdMaestroFk");

                    b.HasIndex("IdRolFk");

                    b.ToTable("RolVsMaestro", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Submodulo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("DateTime");

                    b.Property<string>("NombreSubmodulo")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.HasKey("Id");

                    b.ToTable("SubModulos", (string)null);
                });

            modelBuilder.Entity("Core.Entities.TipoNotificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("DateTime");

                    b.Property<string>("NombreTipo")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.HasKey("Id");

                    b.ToTable("TipoNotificaciones", (string)null);
                });

            modelBuilder.Entity("Core.Entities.TipoRequerimiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("FechaModificacion")
                        .HasColumnType("DateTime");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.HasKey("Id");

                    b.ToTable("TipoRequerimiento", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Blockchain", b =>
                {
                    b.HasOne("Core.Entities.Auditoria", "Auditorias")
                        .WithMany("Blockchains")
                        .HasForeignKey("IdAuditoriaFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.HiloRespuestaNotificacion", "HilosRespuestasNotificaciones")
                        .WithMany("Blockchains")
                        .HasForeignKey("IdHiloRespuestaFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.TipoNotificacion", "TipoNotificaciones")
                        .WithMany("Blockchains")
                        .HasForeignKey("IdNotificacionFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auditorias");

                    b.Navigation("HilosRespuestasNotificaciones");

                    b.Navigation("TipoNotificaciones");
                });

            modelBuilder.Entity("Core.Entities.GenericoVsModulo", b =>
                {
                    b.HasOne("Core.Entities.PermisoGenerico", "PermisosGenericos")
                        .WithMany("GenericoVsModulos")
                        .HasForeignKey("IdGenericoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.MaestroVsSubmodulo", null)
                        .WithMany("GenericoVsModulos")
                        .HasForeignKey("MaestroVsSubmoduloId");

                    b.HasOne("Core.Entities.Submodulo", "Submodulos")
                        .WithMany()
                        .HasForeignKey("SubmodulosId");

                    b.HasOne("Core.Entities.Rol", "roles")
                        .WithMany("GenericoVsModulos")
                        .HasForeignKey("rolesId");

                    b.Navigation("PermisosGenericos");

                    b.Navigation("Submodulos");

                    b.Navigation("roles");
                });

            modelBuilder.Entity("Core.Entities.MaestroVsSubmodulo", b =>
                {
                    b.HasOne("Core.Entities.ModuloMaestro", "Maestro")
                        .WithMany("MaestroVsSubmodulos")
                        .HasForeignKey("IdMaestroFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Submodulo", "Submodulo")
                        .WithMany("MaestroVsSubmodulos")
                        .HasForeignKey("IdSubmoduloFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Maestro");

                    b.Navigation("Submodulo");
                });

            modelBuilder.Entity("Core.Entities.ModuloNotificacion", b =>
                {
                    b.HasOne("Core.Entities.EstadoNotificacion", "estadoNotificacion")
                        .WithMany("ModuloNotificaciones")
                        .HasForeignKey("IdEstadoNotificacionFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Formato", "formato")
                        .WithMany("ModuloNotificaciones")
                        .HasForeignKey("IdFormatoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.HiloRespuestaNotificacion", "hiloRespuesta")
                        .WithMany("ModuloNotificaciones")
                        .HasForeignKey("IdHiloRespuestaFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Radicado", "radicado")
                        .WithMany("ModuloNotificaciones")
                        .HasForeignKey("IdRadicadoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.TipoNotificacion", "tipoNotificacion")
                        .WithMany("ModuloNotificaciones")
                        .HasForeignKey("IdTipoNotificacionFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.TipoRequerimiento", "tipoRequerimiento")
                        .WithMany("ModuloNotificaciones")
                        .HasForeignKey("IdTipoRequerimientoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("estadoNotificacion");

                    b.Navigation("formato");

                    b.Navigation("hiloRespuesta");

                    b.Navigation("radicado");

                    b.Navigation("tipoNotificacion");

                    b.Navigation("tipoRequerimiento");
                });

            modelBuilder.Entity("Core.Entities.RolVsMaestro", b =>
                {
                    b.HasOne("Core.Entities.ModuloMaestro", "Maestros")
                        .WithMany("RolVsMaestros")
                        .HasForeignKey("IdMaestroFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Rol", "Roles")
                        .WithMany("RolVsMaestros")
                        .HasForeignKey("IdRolFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Maestros");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Core.Entities.Auditoria", b =>
                {
                    b.Navigation("Blockchains");
                });

            modelBuilder.Entity("Core.Entities.EstadoNotificacion", b =>
                {
                    b.Navigation("ModuloNotificaciones");
                });

            modelBuilder.Entity("Core.Entities.Formato", b =>
                {
                    b.Navigation("ModuloNotificaciones");
                });

            modelBuilder.Entity("Core.Entities.HiloRespuestaNotificacion", b =>
                {
                    b.Navigation("Blockchains");

                    b.Navigation("ModuloNotificaciones");
                });

            modelBuilder.Entity("Core.Entities.MaestroVsSubmodulo", b =>
                {
                    b.Navigation("GenericoVsModulos");
                });

            modelBuilder.Entity("Core.Entities.ModuloMaestro", b =>
                {
                    b.Navigation("MaestroVsSubmodulos");

                    b.Navigation("RolVsMaestros");
                });

            modelBuilder.Entity("Core.Entities.PermisoGenerico", b =>
                {
                    b.Navigation("GenericoVsModulos");
                });

            modelBuilder.Entity("Core.Entities.Radicado", b =>
                {
                    b.Navigation("ModuloNotificaciones");
                });

            modelBuilder.Entity("Core.Entities.Rol", b =>
                {
                    b.Navigation("GenericoVsModulos");

                    b.Navigation("RolVsMaestros");
                });

            modelBuilder.Entity("Core.Entities.Submodulo", b =>
                {
                    b.Navigation("MaestroVsSubmodulos");
                });

            modelBuilder.Entity("Core.Entities.TipoNotificacion", b =>
                {
                    b.Navigation("Blockchains");

                    b.Navigation("ModuloNotificaciones");
                });

            modelBuilder.Entity("Core.Entities.TipoRequerimiento", b =>
                {
                    b.Navigation("ModuloNotificaciones");
                });
#pragma warning restore 612, 618
        }
    }
}
